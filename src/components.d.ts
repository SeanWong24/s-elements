/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UIColor } from "./global/ui-color";
import { OverlayPosition } from "./components/vivid-overlay/vivid-overlay";
export namespace Components {
    interface VividBadge {
        "color": UIColor;
    }
    interface VividButton {
        "color": UIColor;
        "fill": 'default' | 'outline' | 'clear';
    }
    interface VividCard {
    }
    interface VividCollapse {
        "isHidden": boolean;
    }
    interface VividDatepicker {
        "value": Date;
    }
    interface VividGrid {
        "columnGap": string;
        "columns": string;
        "rowGap": string;
        "rows": string;
    }
    interface VividGridItem {
        "column": number;
        "columnSpan": number;
        "row": number;
        "rowSpan": number;
    }
    interface VividInput {
        "placeholder": string;
        "value": string;
    }
    interface VividOverlay {
        "minimizedScale": string;
        "position": OverlayPosition | string;
        "showed": boolean;
        "transformOrigin": string;
        "useBackdrop": boolean;
        "zIndex": number;
    }
    interface VividRange {
        "max": number;
        "min": number;
        "step": number | '' | 'any';
        "value": number;
    }
    interface VividSelect {
        "color": UIColor;
        "placeholder": string;
        "value": string;
    }
    interface VividSelectOption {
        "highlightColor": string;
        "isSelected": boolean;
        "parentSelectElement": HTMLVividSelectElement;
        "value": string;
    }
    interface VividToggle {
        "checked": boolean;
        "color": UIColor;
        "scale": number;
    }
    interface VividUi {
    }
}
declare global {
    interface HTMLVividBadgeElement extends Components.VividBadge, HTMLStencilElement {
    }
    var HTMLVividBadgeElement: {
        prototype: HTMLVividBadgeElement;
        new (): HTMLVividBadgeElement;
    };
    interface HTMLVividButtonElement extends Components.VividButton, HTMLStencilElement {
    }
    var HTMLVividButtonElement: {
        prototype: HTMLVividButtonElement;
        new (): HTMLVividButtonElement;
    };
    interface HTMLVividCardElement extends Components.VividCard, HTMLStencilElement {
    }
    var HTMLVividCardElement: {
        prototype: HTMLVividCardElement;
        new (): HTMLVividCardElement;
    };
    interface HTMLVividCollapseElement extends Components.VividCollapse, HTMLStencilElement {
    }
    var HTMLVividCollapseElement: {
        prototype: HTMLVividCollapseElement;
        new (): HTMLVividCollapseElement;
    };
    interface HTMLVividDatepickerElement extends Components.VividDatepicker, HTMLStencilElement {
    }
    var HTMLVividDatepickerElement: {
        prototype: HTMLVividDatepickerElement;
        new (): HTMLVividDatepickerElement;
    };
    interface HTMLVividGridElement extends Components.VividGrid, HTMLStencilElement {
    }
    var HTMLVividGridElement: {
        prototype: HTMLVividGridElement;
        new (): HTMLVividGridElement;
    };
    interface HTMLVividGridItemElement extends Components.VividGridItem, HTMLStencilElement {
    }
    var HTMLVividGridItemElement: {
        prototype: HTMLVividGridItemElement;
        new (): HTMLVividGridItemElement;
    };
    interface HTMLVividInputElement extends Components.VividInput, HTMLStencilElement {
    }
    var HTMLVividInputElement: {
        prototype: HTMLVividInputElement;
        new (): HTMLVividInputElement;
    };
    interface HTMLVividOverlayElement extends Components.VividOverlay, HTMLStencilElement {
    }
    var HTMLVividOverlayElement: {
        prototype: HTMLVividOverlayElement;
        new (): HTMLVividOverlayElement;
    };
    interface HTMLVividRangeElement extends Components.VividRange, HTMLStencilElement {
    }
    var HTMLVividRangeElement: {
        prototype: HTMLVividRangeElement;
        new (): HTMLVividRangeElement;
    };
    interface HTMLVividSelectElement extends Components.VividSelect, HTMLStencilElement {
    }
    var HTMLVividSelectElement: {
        prototype: HTMLVividSelectElement;
        new (): HTMLVividSelectElement;
    };
    interface HTMLVividSelectOptionElement extends Components.VividSelectOption, HTMLStencilElement {
    }
    var HTMLVividSelectOptionElement: {
        prototype: HTMLVividSelectOptionElement;
        new (): HTMLVividSelectOptionElement;
    };
    interface HTMLVividToggleElement extends Components.VividToggle, HTMLStencilElement {
    }
    var HTMLVividToggleElement: {
        prototype: HTMLVividToggleElement;
        new (): HTMLVividToggleElement;
    };
    interface HTMLVividUiElement extends Components.VividUi, HTMLStencilElement {
    }
    var HTMLVividUiElement: {
        prototype: HTMLVividUiElement;
        new (): HTMLVividUiElement;
    };
    interface HTMLElementTagNameMap {
        "vivid-badge": HTMLVividBadgeElement;
        "vivid-button": HTMLVividButtonElement;
        "vivid-card": HTMLVividCardElement;
        "vivid-collapse": HTMLVividCollapseElement;
        "vivid-datepicker": HTMLVividDatepickerElement;
        "vivid-grid": HTMLVividGridElement;
        "vivid-grid-item": HTMLVividGridItemElement;
        "vivid-input": HTMLVividInputElement;
        "vivid-overlay": HTMLVividOverlayElement;
        "vivid-range": HTMLVividRangeElement;
        "vivid-select": HTMLVividSelectElement;
        "vivid-select-option": HTMLVividSelectOptionElement;
        "vivid-toggle": HTMLVividToggleElement;
        "vivid-ui": HTMLVividUiElement;
    }
}
declare namespace LocalJSX {
    interface VividBadge {
        "color"?: UIColor;
    }
    interface VividButton {
        "color"?: UIColor;
        "fill"?: 'default' | 'outline' | 'clear';
    }
    interface VividCard {
    }
    interface VividCollapse {
        "isHidden"?: boolean;
    }
    interface VividDatepicker {
        "value"?: Date;
    }
    interface VividGrid {
        "columnGap"?: string;
        "columns"?: string;
        "rowGap"?: string;
        "rows"?: string;
    }
    interface VividGridItem {
        "column"?: number;
        "columnSpan"?: number;
        "row"?: number;
        "rowSpan"?: number;
    }
    interface VividInput {
        "onSChange"?: (event: CustomEvent<string>) => void;
        "onSInput"?: (event: CustomEvent<InputEvent>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface VividOverlay {
        "minimizedScale"?: string;
        "position"?: OverlayPosition | string;
        "showed"?: boolean;
        "transformOrigin"?: string;
        "useBackdrop"?: boolean;
        "zIndex"?: number;
    }
    interface VividRange {
        "max"?: number;
        "min"?: number;
        "onSChange"?: (event: CustomEvent<string>) => void;
        "onSInput"?: (event: CustomEvent<InputEvent>) => void;
        "step"?: number | '' | 'any';
        "value"?: number;
    }
    interface VividSelect {
        "color"?: UIColor;
        "onSChange"?: (event: CustomEvent<string>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface VividSelectOption {
        "highlightColor"?: string;
        "isSelected"?: boolean;
        "parentSelectElement"?: HTMLVividSelectElement;
        "value"?: string;
    }
    interface VividToggle {
        "checked"?: boolean;
        "color"?: UIColor;
        "onSChange"?: (event: CustomEvent<boolean>) => void;
        "scale"?: number;
    }
    interface VividUi {
    }
    interface IntrinsicElements {
        "vivid-badge": VividBadge;
        "vivid-button": VividButton;
        "vivid-card": VividCard;
        "vivid-collapse": VividCollapse;
        "vivid-datepicker": VividDatepicker;
        "vivid-grid": VividGrid;
        "vivid-grid-item": VividGridItem;
        "vivid-input": VividInput;
        "vivid-overlay": VividOverlay;
        "vivid-range": VividRange;
        "vivid-select": VividSelect;
        "vivid-select-option": VividSelectOption;
        "vivid-toggle": VividToggle;
        "vivid-ui": VividUi;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "vivid-badge": LocalJSX.VividBadge & JSXBase.HTMLAttributes<HTMLVividBadgeElement>;
            "vivid-button": LocalJSX.VividButton & JSXBase.HTMLAttributes<HTMLVividButtonElement>;
            "vivid-card": LocalJSX.VividCard & JSXBase.HTMLAttributes<HTMLVividCardElement>;
            "vivid-collapse": LocalJSX.VividCollapse & JSXBase.HTMLAttributes<HTMLVividCollapseElement>;
            "vivid-datepicker": LocalJSX.VividDatepicker & JSXBase.HTMLAttributes<HTMLVividDatepickerElement>;
            "vivid-grid": LocalJSX.VividGrid & JSXBase.HTMLAttributes<HTMLVividGridElement>;
            "vivid-grid-item": LocalJSX.VividGridItem & JSXBase.HTMLAttributes<HTMLVividGridItemElement>;
            "vivid-input": LocalJSX.VividInput & JSXBase.HTMLAttributes<HTMLVividInputElement>;
            "vivid-overlay": LocalJSX.VividOverlay & JSXBase.HTMLAttributes<HTMLVividOverlayElement>;
            "vivid-range": LocalJSX.VividRange & JSXBase.HTMLAttributes<HTMLVividRangeElement>;
            "vivid-select": LocalJSX.VividSelect & JSXBase.HTMLAttributes<HTMLVividSelectElement>;
            "vivid-select-option": LocalJSX.VividSelectOption & JSXBase.HTMLAttributes<HTMLVividSelectOptionElement>;
            "vivid-toggle": LocalJSX.VividToggle & JSXBase.HTMLAttributes<HTMLVividToggleElement>;
            "vivid-ui": LocalJSX.VividUi & JSXBase.HTMLAttributes<HTMLVividUiElement>;
        }
    }
}
